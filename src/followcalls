#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
from callfollower import CallFollower
from callfollower.callgraph import GraphType, GraphStyle
from callfollower import __version__ as VERSION
from operator import attrgetter
import argparse
import logging
import sys
try:
    # Not really necessary.
    import argcomplete
except ModuleNotFoundError:
    pass


#######################################
# Constants                           #
#######################################
ARGPARSE_VERSION_TXT = '%(prog)s {}'.format(VERSION)

# Formating for log files.
LogFileFormat = "{asctime}  {levelname:8}  {name:50} {message}"
dateFormat = '%Y-%m-%d %H:%M:%S'


#######################################
# Standalone runner.                  #
#######################################
class CallFollowerCli:
    def __init__(self):
        # Create logger.
        self.rootlog = logging.getLogger("CallFollower")
        self.log = logging.getLogger("CallFollower.CallFollowerCli")

        #######################################################################
        # Start of argparse configuration.                                    #
        #######################################################################
        # Create parser.
        self.parser = argparse.ArgumentParser(
            prog="CallFollower",
            formatter_class=argparse.RawDescriptionHelpFormatter)

        # --version
        self.parser.add_argument('--version',
                                 action='version',
                                 version=ARGPARSE_VERSION_TXT)

        # -v, --verbose
        self.parser.add_argument("-v",
                                 "--verbose",
                                 help="Activate debug mode (show full \
                                       exceptions).",
                                 default=0,
                                 action="count")

        # -d, --dir
        self.parser.add_argument("-d",
                                 "--dir",
                                 help="Root directory for parsing.",
                                 metavar="DIR",
                                 default=".",
                                 action="store")

        # -L, --log
        self.parser.add_argument("-L",
                                 "--log",
                                 help="log file.",
                                 metavar="FILE",
                                 dest="LogFile",
                                 default=None,
                                 action="store")

        #######################################################################
        # Adding subparsers.                                                  #
        #######################################################################
        subparsers = self.parser.add_subparsers(metavar="Command",
                                                required=True)

        #######################################################################
        # help                                                                #
        #######################################################################
        CmdHelp = subparsers.add_parser(
                "help",
                help="Show help for a certain command.")

        # Attach command function.
        CmdHelp.set_defaults(subcmd=self.help)

        # Optional positional argument(s) Command.
        CmdHelp.add_argument("Command",
                             nargs="*",
                             default=[],
                             action="store")

        #######################################################################
        # preprocess                                                          #
        #######################################################################
        CmdPreprocess = subparsers.add_parser(
                "preprocess",
                help="preprocess files for faster execution.")

        # Attach command function.
        CmdPreprocess.set_defaults(subcmd=self.preprocess)

        #######################################################################
        # follow                                                              #
        #######################################################################
        CmdFollow = subparsers.add_parser("follow",
                                          help="create a calling chain.")

        self._setup_cmd_options(CmdFollow)

        # Create subparsers for follow.
        subfollow = CmdFollow.add_subparsers(metavar="Direction",
                                             required=True)

        #######################################################################
        # follow up                                                           #
        #######################################################################
        CmdUp = subfollow.add_parser(
                "up",
                help="create the chain of calling functions.")

        # Attach command function.
        CmdUp.set_defaults(subcmd=self.followUp)

        # positional argument function.
        CmdUp.add_argument("func",
                           metavar="FUNCTION",
                           action="store")

        self._setup_cmd_options(CmdUp)

        #######################################################################
        # follow down                                                         #
        #######################################################################
        CmdDown = subfollow.add_parser(
                "down",
                help="create the chain of called functions.")

        # Attach command function.
        CmdDown.set_defaults(subcmd=self.followDown)

        # positional argument function.
        CmdDown.add_argument("func",
                             metavar="FUNCTION",
                             action="store")

        self._setup_cmd_options(CmdDown)

        #######################################################################
        # follow all                                                          #
        #######################################################################
        CmdAll = subfollow.add_parser(
                "all",
                help="create the chain of both calling and called functions.")

        # Attach command function.
        CmdAll.set_defaults(subcmd=self.followAll)

        # positional argument function.
        CmdAll.add_argument("func",
                            metavar="FUNCTION",
                            action="store")

        self._setup_cmd_options(CmdAll)

        #######################################################################
        # End of argpare configuration                                        #
        #######################################################################

        # Bash autocomplete
        try:
            argcomplete.autocomplete(self.parser)
        except NameError:
            pass

    def run(self):
        # Parse arguments
        args = self.parser.parse_args()

        if args.LogFile:
            LogFileHandler = logging.FileHandler(args.LogFile)
            LogFileHandler.setFormatter(logging.Formatter(LogFileFormat,
                                                          datefmt=dateFormat,
                                                          style="{"))
            self.rootlog.addHandler(LogFileHandler)

        # Stdout logger.
        StdOutHandler = logging.StreamHandler(sys.stdout)
        StdOutHandler.setFormatter(logging.Formatter('{message}', style="{"))
        StdOutHandler.setLevel(logging.WARNING)
        self.rootlog.addHandler(StdOutHandler)

        logLevel = logging.WARNING
        # Parse verbosity
        if args.verbose >= 2:
            logLevel = logging.DEBUG
        elif args.verbose == 1:
            logLevel = logging.INFO

        # Set log level of the root logger.
        self.rootlog.setLevel(logLevel)

        # Set log level of the handler in focus.
        # Note: stdout is always used at least for WARNING level.
        if args.LogFile:
            LogFileHandler.setLevel(logLevel)
            self.log.debug("Verbosity = %d. Setting log level to %s for %s.",
                           args.verbose,
                           logging.getLevelName(logLevel),
                           args.LogFile)
        else:
            StdOutHandler.setLevel(logLevel)
            self.log.debug("Verbosity = %d. " +
                           "Setting log level to %s for stdout.",
                           args.verbose,
                           logging.getLevelName(logLevel))

        self.log.debug("Started with args %s.", str(args))

        # Create instance of CallFollower only if needed.
        if args.subcmd != self.help:
            self.follower = CallFollower(args.dir)

        # Running subcommand.
        args.subcmd(args)

    def _choice_from_string(self, type_):
        def func(name):
            try:
                return type_[name.upper()]
            except KeyError:
                msg = "%r is not a valid choice" % name
                raise argparse.ArgumentTypeError(msg)
        return func

    def _setup_cmd_options(self, cmd):
        # -l, --limit
        cmd.add_argument("-l",
                         "--limit",
                         help="maximum number of calling layers.",
                         action="store",
                         type=int,
                         metavar="N",
                         default=0)

        # -g, --graph
        cmd.add_argument("-g",
                         "--graph",
                         help="the graph genertor.",
                         action="store",
                         type=self._choice_from_string(GraphType),
                         choices=GraphType,
                         metavar=str(list(map(attrgetter("name"), GraphType))),
                         default=GraphType.DEFAULT)

        # -s, --style
        cmd.add_argument("-s",
                         "--style",
                         help="the graph genertor.",
                         action="store",
                         type=self._choice_from_string(GraphStyle),
                         choices=GraphStyle,
                         metavar=str(list(map(attrgetter("name"),
                                              GraphStyle))),
                         default=GraphStyle.BASIC)

    def help(self, args):
        """Run the 'help' subcommand."""
        # Add "-h" to the commands and re-run the parser.
        args.Command.append("-h")
        self.parser.parse_args(args.Command)

    def preprocess(self, args):
        """Run the 'preprocess' subcommand."""
        self.follower.preprocess()

    def followUp(self, args):
        """Run the 'follow up' subcommand."""
        graph = self.follower.getCaller(args.func, args.limit)
        graph.draw(args.graph.value, args.style.value)

    def followDown(self, args):
        """Run the 'follow down' subcommand."""
        graph = self.follower.getCalled(args.func, args.limit)
        graph.draw(args.graph.value, args.style.value)

    def followAll(self, args):
        """Run the 'follow all' subcommand."""
        graph = self.follower.getFullTree(args.func, args.limit)
        graph.draw(args.graph.value, args.style.value)


if __name__ == "__main__":
    # Create a standalone runnner instanace and run it.
    runner = CallFollowerCli()
    runner.run()
